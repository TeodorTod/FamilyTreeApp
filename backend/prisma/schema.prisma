// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  displayName   String?
  picture       String?
  provider      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt

  familyMembers FamilyMember[]
}

model FamilyMember {
  id         String    @id @default(uuid())
  userId     String
  firstName  String
  middleName String?
  lastName   String
  gender     String?
  dob        DateTime
  dod        DateTime?
  isAlive    Boolean   @default(true)
  photoUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  role       String   

  /// back‐relation to MemberProfile (one-to-one)
  profile    MemberProfile? @relation("ProfileToMember")

  user       User      @relation(fields: [userId], references: [id])
  parentOf   Relationship[] @relation("ParentChildFrom")
  childOf    Relationship[] @relation("ParentChildTo")
  media      Media[]
}

model Relationship {
  id            String         @id @default(uuid())
  fromMemberId  String
  toMemberId    String
  type          String         

  fromMember    FamilyMember   @relation("ParentChildFrom", fields: [fromMemberId], references: [id])
  toMember      FamilyMember   @relation("ParentChildTo",   fields: [toMemberId],   references: [id])
}

model Media {
  id         String        @id @default(uuid())
  memberId   String
  url        String
  type       String 
  caption    String?
  uploadedAt DateTime      @default(now())

  member     FamilyMember  @relation(fields: [memberId], references: [id])
}

model MemberProfile {
  /// PK
  id           String       @id @default(uuid())

  /// FK → FamilyMember.id (one-to-one)
  memberId     String       @unique
  member       FamilyMember @relation("ProfileToMember", fields: [memberId], references: [id])

  /// long-form biography
  bio          String?     

  /// headline media URL
  coverMediaUrl String?    

  /// lists & blobs as JSONB
  achievements Json?       // e.g. [ { title: "Eagle Scout", year: 1999 }, … ]
  facts        Json?       // e.g. { birthplace: "Sofia", nickname: "Gosho" }
  favorites    Json?       // e.g. { books: [...], movies: [...], places: [...] }
  education    Json?       // e.g. [ { school: "...", degree: "...", from: "...", to: "..." }, … ]
  work         Json?       // e.g. [ { company: "...", title: "...", from: "...", to: "..." }, … ]
  personalInfo Json?       // e.g. { email: "...", phone: "...", website: "..." }

  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
}

